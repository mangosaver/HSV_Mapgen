const char* vertSrc = "#version 330 core\n"
"out vec2 TexCoord;\n"
"//in vec2 position;\n"
"// Input vertex data, different for all executions of this shader.\n"
"layout(location = 0) in vec2 vertexPosition_modelspace;\n"
"layout (location = 1) in vec2 aTexCoord;\n"
"// Values that stay constant for the whole mesh.\n"
"uniform mat4 MVP;\n"
"void main() {\n"
"    // Output position of the vertex, in clip space : MVP * position\n"
"    TexCoord = aTexCoord;\n"
"    gl_Position = MVP * vec4(vertexPosition_modelspace, 0, 1);\n"
"}";
const char* fragSrc = "#version 330 core\n"
"in vec2 TexCoord;\n"
"layout (location = 0) out vec4 color;\n"
"uniform sampler2D texImage;\n"
"uniform int compIdx;\n"
"uniform float alpha;\n"
"uniform float blendOrig;\n"
"uniform float blendRgbComp;\n"
"vec3 rgb2hsv(vec3 c) {\n"
"    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n"
"    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n"
"    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n"
"    float d = q.x - min(q.w, q.y);\n"
"    float e = 1.0e-10;\n"
"    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n"
"}\n"
"vec3 hsv2rgb(vec3 c) {\n"
"    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n"
"    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n"
"    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n"
"}\n"
"vec3 interp(float a, vec3 b, float d) {\n"
"    return vec3(a * (1.0 - d) + b.x * d,\n"
"    a * (1.0 - d) + b.y * d,\n"
"    a * (1.0 - d) + b.z * d);\n"
"}\n"
"void main() {\n"
"    vec4 texColor = texture(texImage, TexCoord);\n"
"    vec3 hsv = rgb2hsv(texColor.rgb);\n"
"    vec3 interpolated = interp(hsv[compIdx], texColor.rgb, blendOrig);\n"
"    vec3 interpolated2 = interp(texColor[compIdx], interpolated, 1.0 - blendRgbComp);\n"
"    color = vec4(interpolated2, alpha);\n"
"}";
